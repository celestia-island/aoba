name: E2E Tests

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

env:
  CARGO_TERM_COLOR: always

jobs:
  e2e-test-linux:
    name: E2E Tests (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example: [cli_e2e, tui_e2e_test_master, tui_e2e_test_slave]

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev pkg-config libx11-dev libxcb-shape0-dev libxcb-xfixes0-dev socat

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build test dependencies
        run: |
          cargo build

      - name: Setup virtual serial ports
        run: |
          chmod +x scripts/socat_init.sh
          sudo scripts/socat_init.sh

      - name: Run TUI E2E tests
        run: |
          cargo run --example ${{ matrix.example }}

      - name: Cleanup virtual ports
        if: always()
        run: |
          # Kill socat processes if they exist
          sudo pkill socat || true

          # Remove virtual port links if they exist
          sudo rm -f /dev/vcom1 /dev/vcom2 || true

  e2e-test-windows:
    name: E2E Tests (Windows)
    runs-on: windows-latest
    strategy:
      matrix:
        example: [cli_e2e, tui_e2e_test_master, tui_e2e_test_slave]

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~\.cargo\registry\index\
            ~\.cargo\registry\cache\
            ~\.cargo\git\db\
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Download and install com0com
        shell: powershell
        run: |
          Write-Host "Downloading com0com signed installer..."
          $url = "https://sourceforge.net/projects/com0com/files/com0com/3.0.0.0/com0com-3.0.0.0-i386-and-x64-signed.zip/download"
          $zipPath = "$env:TEMP\com0com.zip"
          $extractPath = "$env:TEMP\com0com"
          
          # Download with progress
          Invoke-WebRequest -Uri $url -OutFile $zipPath -UseBasicParsing
          
          # Extract
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          
          # Find and run the installer
          $installer = Get-ChildItem -Path $extractPath -Filter "*.exe" -Recurse | Select-Object -First 1
          if ($installer) {
            Write-Host "Installing com0com from $($installer.FullName)..."
            Start-Process -FilePath $installer.FullName -ArgumentList "/S" -Wait -NoNewWindow
            Write-Host "com0com installation completed"
          } else {
            Write-Host "ERROR: Installer not found in extracted files"
            exit 1
          }
          
          # Wait for installation to complete
          Start-Sleep -Seconds 5

      - name: Build test dependencies
        run: |
          cargo build

      - name: Setup virtual serial ports
        shell: powershell
        run: |
          $env:CI_FORCE_VCOM = "1"
          Write-Host "Running com0com_init.ps1..."
          powershell -ExecutionPolicy Bypass -File scripts\com0com_init.ps1

      - name: Run E2E tests
        env:
          CI_FORCE_VCOM: "1"
        run: |
          cargo run --example ${{ matrix.example }}

      - name: Cleanup virtual ports
        if: always()
        shell: powershell
        run: |
          # Remove com0com port pair if it exists
          $setupcPath = "C:\Program Files (x86)\com0com\setupc.exe"
          if (-not (Test-Path $setupcPath)) {
            $setupcPath = "C:\Program Files\com0com\setupc.exe"
          }
          if (Test-Path $setupcPath) {
            & $setupcPath remove 0 2>&1 | Out-Null
          }
