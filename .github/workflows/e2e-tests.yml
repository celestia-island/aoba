name: E2E Tests

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

env:
  CARGO_TERM_COLOR: always

jobs:
  e2e-test-linux:
    name: E2E Tests (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example: [cli_e2e, tui_e2e_test_master, tui_e2e_test_slave]

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev pkg-config libx11-dev libxcb-shape0-dev libxcb-xfixes0-dev socat

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build test dependencies
        run: |
          cargo build

      - name: Setup virtual serial ports
        run: |
          chmod +x scripts/socat_init.sh
          sudo scripts/socat_init.sh

      - name: Run TUI E2E tests
        env:
          AOBATEST_PORT1: /tmp/vcom1
          AOBATEST_PORT2: /tmp/vcom2
        run: |
          cargo run --example ${{ matrix.example }}

      - name: Cleanup virtual ports
        if: always()
        run: |
          # Kill socat processes if they exist
          sudo pkill socat || true

          # Remove virtual port links if they exist
          sudo rm -f /tmp/vcom1 /tmp/vcom2 || true

  e2e-test-windows:
    name: E2E Tests (Windows)
    runs-on: windows-latest
    strategy:
      matrix:
        example: [cli_e2e, tui_e2e_test_master, tui_e2e_test_slave]

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install com0com via Chocolatey
        run: |
          Write-Host "Installing com0com using Chocolatey..."
          choco install com0com -y
          
          Write-Host "com0com installed successfully"
          
          # Wait for installation to complete
          Start-Sleep -Seconds 5

      - name: Build test dependencies
        run: |
          cargo build

      - name: Setup virtual serial ports
        id: setup_ports
        run: |
          powershell -ExecutionPolicy Bypass -File scripts/com0com_init.ps1 -Mode tui
          
          # The script will have created the ports, now detect them for use in tests
          $availablePorts = [System.IO.Ports.SerialPort]::GetPortNames()
          Write-Host "Available ports after setup: $($availablePorts -join ', ')"
          
          # Try to find COM1 and COM2, or use first two COM ports available
          $port1 = if ($availablePorts -contains "COM1") { "COM1" } elseif ($availablePorts -match "CNCA") { $availablePorts -match "CNCA" | Select-Object -First 1 } else { $availablePorts | Where-Object { $_ -match "^COM\d+$" } | Select-Object -First 1 }
          $port2 = if ($availablePorts -contains "COM2") { "COM2" } elseif ($availablePorts -match "CNCB") { $availablePorts -match "CNCB" | Select-Object -First 1 } else { $availablePorts | Where-Object { $_ -match "^COM\d+$" -and $_ -ne $port1 } | Select-Object -First 1 }
          
          Write-Host "Will use ports: $port1 and $port2"
          
          # Export to environment for next steps
          echo "PORT1=$port1" >> $env:GITHUB_ENV
          echo "PORT2=$port2" >> $env:GITHUB_ENV

      - name: Run TUI E2E tests
        env:
          AOBATEST_PORT1: ${{ env.PORT1 }}
          AOBATEST_PORT2: ${{ env.PORT2 }}
          CI_FORCE_VCOM: 1
        run: |
          Write-Host "Running tests with ports: $env:AOBATEST_PORT1 and $env:AOBATEST_PORT2"
          cargo run --example ${{ matrix.example }}

      - name: Cleanup virtual ports
        if: always()
        run: |
          # Remove com0com port pairs
          $setupcPath = "C:\Program Files (x86)\com0com\setupc.exe"
          if (Test-Path $setupcPath) {
            & $setupcPath remove 0 2>&1 | Out-Null
          }
