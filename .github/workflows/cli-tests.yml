# CLI functionality tests with virtual serial ports
# Tests command-line interface including port listing capabilities
name: CLI Tests

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  cli-test:
    name: CLI Tests
    runs-on: ubuntu-latest
    # Use the shared base image with pre-installed dependencies
    # container: ghcr.io/${{ github.repository }}/ci-base:latest
    # Only run after basic checks pass
    needs: []
    
    steps:
    - uses: actions/checkout@v4
    
    # Use stable Rust for consistent CLI test results
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    # Install system dependencies including socat for virtual serial ports
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev pkg-config libx11-dev libxcb-shape0-dev libxcb-xfixes0-dev socat
    
    # Cache Cargo registry to speed up builds
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    # Build release binaries for CLI testing
    - name: Build release binaries
      run: cargo build --release
    
    # Set up virtual serial ports for CLI port listing tests
    # Creates /tmp/cli_vcom1 and /tmp/cli_vcom2 connected to each other
    - name: Setup virtual serial ports
      run: |
        ./tests/setup_virtual_ports.sh /tmp/cli_vcom1 /tmp/cli_vcom2
        SOCAT_PID=$(cat /tmp/socat_pid_cli_vcom1)
        echo "SOCAT_PID=$SOCAT_PID" >> $GITHUB_ENV
    
    # Test CLI functionality including port listing capabilities
    # This tests the core CLI functionality with real virtual ports
    - name: Run CLI tests
      run: |
        echo "=== Testing CLI help ==="
        ./target/release/aoba --help
        
        echo "=== Testing port listing (should detect virtual ports) ==="
        ./target/release/aoba --list-ports
        
        echo "=== Testing JSON output ==="
        ./target/release/aoba --list-ports --json
        
        echo "=== Testing TUI mode (quick startup/shutdown) ==="
        timeout 5 ./target/release/aoba --tui || echo "TUI test completed"
        
        echo "=== Running dedicated CLI integration tests ==="
        cargo run --example cli_integration_tests
    
    # Clean up virtual ports
    - name: Cleanup
      if: always()
      run: |
        ./tests/cleanup_virtual_ports.sh /tmp/cli_vcom1