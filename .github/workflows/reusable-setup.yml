name: Reusable Setup

on:
  workflow_call:
    inputs:
      install_rust:
        description: "Install Rust toolchain via dtolnay action"
        required: false
        type: boolean
        default: false
      rust_toolchain:
        description: "Rust toolchain to install (stable/nightly)"
        required: false
        type: string
        default: "stable"
      install_deps:
        description: "Install system deps: none | basic | gui"
        required: false
        type: string
        default: "none"
      socat_init:
        description: "Run scripts/socat_init.sh to create virtual serial ports"
        required: false
        type: boolean
        default: false
      build_packages:
        description: "Newline-separated list of cargo packages to build (optional)"
        required: false
        type: string
        default: ""
      upload_artifacts:
        description: "Upload build artifacts listed in artifacts input"
        required: false
        type: boolean
        default: false
      artifacts:
        description: "Newline-separated list of artifact paths to upload"
        required: false
        type: string
        default: ""

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      built: ${{ steps.set-built-output.outputs.built }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Conditionally install Rust toolchain
        if: ${{ inputs.install_rust == true }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.rust_toolchain }}

      - name: Conditionally install system dependencies (basic/gui)
        if: ${{ inputs.install_deps != 'none' }}
        run: |
          sudo apt-get update
          if [ "${{ inputs.install_deps }}" = "gui" ]; then
            sudo apt-get install -y libudev-dev pkg-config libx11-dev libxcb-shape0-dev libxcb-xfixes0-dev socat
          else
            sudo apt-get install -y libudev-dev pkg-config socat
          fi

      - name: Cache cargo registry
        if: ${{ inputs.build_packages != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build packages (if provided)
        if: ${{ inputs.build_packages != '' }}
        run: |
          echo "Building packages:\n${{ inputs.build_packages }}"
          echo "${{ inputs.build_packages }}" | while read pkg; do
            if [ -n "$pkg" ]; then
              cargo build --package "$pkg"
            fi
          done

      - name: Run socat init (if requested)
        if: ${{ inputs.socat_init == true }}
        run: |
          chmod +x scripts/socat_init.sh
          ./scripts/socat_init.sh

      - id: package_artifacts
        name: Package artifacts (if requested)
        if: ${{ inputs.upload_artifacts == true && inputs.artifacts != '' }}
        run: |
          echo "Packaging artifacts..."
          TMPDIR=$(mktemp -d)
          echo "${{ inputs.artifacts }}" | while read path; do
            if [ -n "$path" ]; then
              echo "Including $path"
              cp -r "$path" "$TMPDIR/" || true
            fi
          done
          TAR=$TMPDIR/artifacts.tar.gz
          tar -C "$TMPDIR" -czf "$TAR" . || true
          echo "artifact=$TAR" >> $GITHUB_OUTPUT

      - name: Upload artifact archive
        if: ${{ inputs.upload_artifacts == true && inputs.artifacts != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ steps.package_artifacts.outputs.artifact }}

      # set a simple output to indicate we ran
      - name: Set built output
        id: set-built-output
        run: |
          echo "built=true" >> $GITHUB_OUTPUT
