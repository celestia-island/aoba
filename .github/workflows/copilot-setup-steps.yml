# Copilot development environment setup
# This workflow provides a ready-to-use environment for GitHub Copilot agents
# Includes Rust toolchain, virtual serial ports, and virtual terminals
name: Copilot Environment

on:
  # Manual trigger for setting up Copilot development environment
  workflow_dispatch:
  # Also run on schedule to keep environment fresh
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

env:
  CARGO_TERM_COLOR: always

jobs:
  setup-copilot-env:
    name: Setup Copilot Environment
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Install latest stable Rust with all necessary components
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy, rust-src
    
    # Install all system dependencies needed for development
    - name: Install system dependencies
      run: |
        sudo apt-get update
        # Core build dependencies
        sudo apt-get install -y libudev-dev pkg-config libx11-dev libxcb-shape0-dev libxcb-xfixes0-dev
        # Virtual serial port tools
        sudo apt-get install -y socat minicom
        # Virtual terminal and screen capture tools
        sudo apt-get install -y screen tmux expect
        # Development tools
        sudo apt-get install -y git curl wget build-essential
    
    # Cache Cargo registry for faster builds
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: copilot-env-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          copilot-env-cargo-
    
    # Pre-build the project to warm up the cache
    - name: Pre-build project
      run: |
        cargo build --release
        cargo build --release --bin smoke_test
        cargo test --no-run
    
    # Set up persistent virtual serial ports for development
    - name: Setup development virtual serial ports
      run: |
        # Create multiple virtual serial port pairs for testing
        mkdir -p /tmp/copilot-ports
        
        # Main testing pair
        socat -d -d pty,raw,echo=0,link=/tmp/copilot-ports/vcom1 pty,raw,echo=0,link=/tmp/copilot-ports/vcom2 &
        echo $! > /tmp/copilot-ports/socat1.pid
        
        # Secondary testing pair
        socat -d -d pty,raw,echo=0,link=/tmp/copilot-ports/vcom3 pty,raw,echo=0,link=/tmp/copilot-ports/vcom4 &
        echo $! > /tmp/copilot-ports/socat2.pid
        
        sleep 2
        
        # Make ports accessible
        sudo chmod 666 /tmp/copilot-ports/vcom*
        
        # Verify setup
        ls -la /tmp/copilot-ports/
    
    # Set up virtual terminal environment for TUI testing
    - name: Setup virtual terminal environment
      run: |
        # Create scripts for easy TUI testing
        mkdir -p /tmp/copilot-scripts
        
        # Script to start TUI in virtual terminal
        cat > /tmp/copilot-scripts/start-tui.sh << 'EOF'
#!/bin/bash
# Start AOBA TUI in a virtual terminal for testing
cd /home/runner/work/aoba/aoba
screen -dmS aoba-tui ./target/release/aoba --tui
echo "TUI started in screen session 'aoba-tui'"
echo "Use 'screen -r aoba-tui' to attach"
EOF
        
        # Script to run smoke tests
        cat > /tmp/copilot-scripts/run-smoke-tests.sh << 'EOF'
#!/bin/bash
# Run smoke tests with virtual ports
cd /home/runner/work/aoba/aoba
export VCOM1=/tmp/copilot-ports/vcom1
export VCOM2=/tmp/copilot-ports/vcom2
./target/release/smoke_test
EOF
        
        # Make scripts executable
        chmod +x /tmp/copilot-scripts/*.sh
    
    # Test the environment to ensure everything works
    - name: Test environment
      run: |
        # Test Rust toolchain
        rustc --version
        cargo --version
        
        # Test virtual ports
        ls -la /tmp/copilot-ports/
        
        # Test build
        cargo check --all-targets --all-features
        
        # Test smoke tests
        /tmp/copilot-scripts/run-smoke-tests.sh
        
        echo "âœ… Copilot environment is ready!"
        echo "Virtual ports available at: /tmp/copilot-ports/"
        echo "Helper scripts available at: /tmp/copilot-scripts/"
    
    # Keep the environment alive for a while for development
    - name: Keep environment alive
      run: |
        echo "Environment setup complete. Ready for Copilot development."
        echo "Virtual serial ports:"
        ls -la /tmp/copilot-ports/
        echo "Helper scripts:"
        ls -la /tmp/copilot-scripts/
    
    # Cleanup (optional, runs even if previous steps fail)
    - name: Cleanup
      if: always()
      run: |
        # Clean up background processes if needed
        if [ -f /tmp/copilot-ports/socat1.pid ]; then
          kill $(cat /tmp/copilot-ports/socat1.pid) 2>/dev/null || true
        fi
        if [ -f /tmp/copilot-ports/socat2.pid ]; then
          kill $(cat /tmp/copilot-ports/socat2.pid) 2>/dev/null || true
        fi